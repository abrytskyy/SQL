----------DAY 7----------

--UNIT 
SELECT first_name FROM actor
UNION
SELECT first_name FROM customer
ORDER BY first_name

SELECT first_name FROM actor
UNION ALL
SELECT first_name FROM customer
ORDER BY first_name

SELECT first_name, 'actor' FROM actor
UNION ALL
SELECT first_name, 'customer' FROM customer
ORDER BY first_name

SELECT first_name, 'actor' AS origin FROM actor
UNION
SELECT first_name, 'customer' AS test1 FROM customer
ORDER BY first_name

SELECT first_name, 'actor' AS origin FROM actor
UNION ALL
SELECT first_name, 'customer' FROM customer
ORDER BY first_name

--'origin' doesnt change
SELECT first_name, 'actor' AS origin FROM actor
UNION ALL
SELECT first_name, 'customer' AS test1 FROM customer
ORDER BY first_name

SELECT first_name, 'actor' AS origin FROM actor
UNION
SELECT first_name, 'customer' AS test1 FROM customer
UNION
SELECT first_name, 'staff' FROM staff
ORDER BY first_name

SELECT first_name, 'actor' AS origin FROM actor
UNION
SELECT first_name, 'customer' AS test1 FROM customer
UNION
SELECT first_name, 'staff' FROM staff
ORDER BY 2 DESC

SELECT first_name AS first_name, 'actor' AS origin FROM actor
UNION
SELECT first_name, 'customer' AS test1 FROM customer
UNION
SELECT UPPER(first_name), 'staff' FROM staff
ORDER BY 2 DESC

SELECT * FROM payment

SELECT 
AVG(amount) 
FROM payment

SELECT 
*
FROM payment
WHERE amount > 4.2006673312979002

--Subqueries in WHERE 
SELECT 
* 
FROM payment
WHERE amount > (SELECT AVG(amount) FROM payment)

-- > = < for 1 single value
SELECT
*
FROM payment
WHERE customer_id = (SELECT customer_id FROM customer
					WHERE first_name = 'ADAM')

--doesnt work for list of multiple value
SELECT
*
FROM payment
WHERE customer_id = (SELECT customer_id FROM customer
					WHERE first_name LIKE 'A%')

-- can use IN for multiple value:
SELECT
*
FROM payment
WHERE customer_id IN (SELECT customer_id FROM customer
					WHERE first_name LIKE 'A%')

--Challenge 1
SELECT 
film_id,title, length
FROM film
WHERE length > (SELECT AVG(length) FROM film)

--Challenge 1(1)
SELECT 
*
FROM film
WHERE length > (SELECT AVG(length) FROM film)

--Challenge 2
SELECT COUNT(*), i.film_id, title FROM inventory i
INNER JOIN film f
ON i.film_id = f.film_id
WHERE store_id = 2
GROUP BY i.film_id, title
HAVING COUNT(*) > 3
ORDER BY film_id

--Challenge 2(1)
SELECT * FROM film
WHERE film_id IN
(SELECT film_id FROM inventory
WHERE store_id=2
GROUP BY film_id
HAVING COUNT(*) >3)

--Challenge 3
SELECT first_name, last_name FROM customer c
INNER JOIN payment p
ON c.customer_id = p.customer_id
WHERE DATE(payment_date) = '2020-01-25'
--output 136

--Challenge 3(1)
SELECT first_name, last_name FROM customer c
WHERE customer_id IN (SELECT customer_id FROM payment 
					  WHERE DATE(payment_date) = '2020-01-25')
--output 127

--Finding dublicates 136 - 127 = 9
SELECT first_name, last_name
FROM customer c
INNER JOIN payment p
ON c.customer_id = p.customer_id
WHERE DATE(payment_date) = '2020-01-25'
GROUP BY first_name, last_name
HAVING COUNT(*) > 1

--Challenge 3(corrigert)
SELECT DISTINCT first_name, last_name FROM customer c
JOIN payment p
ON c.customer_id = p.customer_id
WHERE DATE(payment_date) = '2020-01-25'

--Challenge 4
SELECT * FROM customer
SELECT * FROM payment

SELECT customer_id, SUM(amount) FROM payment
GROUP BY customer_id
HAVING SUM(amount) > 30
ORDER BY customer_id

SELECT first_name, email, p.customer_id, SUM(amount) FROM customer c
INNER JOIN payment p
ON c.customer_id = p.customer_id
GROUP BY first_name, email,p.customer_id
HAVING SUM(amount) > 30
ORDER BY p.customer_id

--Challenge 4(wrong)
SELECT first_name, email FROM customer
WHERE customer_id IN (SELECT customer_id, SUM(amount) FROM payment
					  GROUP BY customer_id
					  HAVING SUM(amount) > 30
					  ORDER BY customer_id)

--Challenge 4(1)
SELECT first_name, email 
FROM customer
WHERE customer_id IN (SELECT customer_id 
					  FROM payment
					  GROUP BY customer_id
					  HAVING SUM(amount) > 30)

--Challenge 5
SELECT first_name, last_name FROM customer
WHERE customer_id IN (SELECT customer_id FROM customer
					  INNER JOIN address
					  ON address.address_id = customer.address_id
					 WHERE district = 'California')
AND customer_id IN (SELECT customer_id FROM payment
					  GROUP BY customer_id
					  HAVING SUM(amount) > 100)

--Challenge 5(to check with JOIN):
SELECT first_name, last_name, district, a.address_id, SUM(amount)	FROM customer c
INNER JOIN address a
ON a.address_id = c.address_id
INNER JOIN payment p
ON p.customer_id = c.customer_id
WHERE district = 'California'
GROUP BY first_name, last_name, district, a.address_id
HAVING SUM(amount) > 100

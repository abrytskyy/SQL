----------DAY 7----------

--UNIT 
SELECT first_name FROM actor
UNION
SELECT first_name FROM customer
ORDER BY first_name

SELECT first_name FROM actor
UNION ALL
SELECT first_name FROM customer
ORDER BY first_name

SELECT first_name, 'actor' FROM actor
UNION ALL
SELECT first_name, 'customer' FROM customer
ORDER BY first_name

SELECT first_name, 'actor' AS origin FROM actor
UNION
SELECT first_name, 'customer' AS test1 FROM customer
ORDER BY first_name

SELECT first_name, 'actor' AS origin FROM actor
UNION ALL
SELECT first_name, 'customer' FROM customer
ORDER BY first_name

--'origin' doesnt change
SELECT first_name, 'actor' AS origin FROM actor
UNION ALL
SELECT first_name, 'customer' AS test1 FROM customer
ORDER BY first_name

SELECT first_name, 'actor' AS origin FROM actor
UNION
SELECT first_name, 'customer' AS test1 FROM customer
UNION
SELECT first_name, 'staff' FROM staff
ORDER BY first_name

SELECT first_name, 'actor' AS origin FROM actor
UNION
SELECT first_name, 'customer' AS test1 FROM customer
UNION
SELECT first_name, 'staff' FROM staff
ORDER BY 2 DESC

SELECT first_name AS first_name, 'actor' AS origin FROM actor
UNION
SELECT first_name, 'customer' AS test1 FROM customer
UNION
SELECT UPPER(first_name), 'staff' FROM staff
ORDER BY 2 DESC

SELECT * FROM payment

SELECT 
AVG(amount) 
FROM payment

SELECT 
*
FROM payment
WHERE amount > 4.2006673312979002




--Subqueries in WHERE 




SELECT 
* 
FROM payment
WHERE amount > (SELECT AVG(amount) FROM payment)

-- > = < for 1 single value
SELECT
*
FROM payment
WHERE customer_id = (SELECT customer_id FROM customer
					WHERE first_name = 'ADAM')

--doesnt work for list of multiple value
SELECT
*
FROM payment
WHERE customer_id = (SELECT customer_id FROM customer
					WHERE first_name LIKE 'A%')

-- can use IN for multiple value:
SELECT
*
FROM payment
WHERE customer_id IN (SELECT customer_id FROM customer
					WHERE first_name LIKE 'A%')

--Challenge 1
SELECT 
film_id,title, length
FROM film
WHERE length > (SELECT AVG(length) FROM film)

--Challenge 1(1)
SELECT 
*
FROM film
WHERE length > (SELECT AVG(length) FROM film)

--Challenge 2
SELECT COUNT(*), i.film_id, title FROM inventory i
INNER JOIN film f
ON i.film_id = f.film_id
WHERE store_id = 2
GROUP BY i.film_id, title
HAVING COUNT(*) > 3
ORDER BY film_id

--Challenge 2(1)
SELECT * FROM film
WHERE film_id IN
(SELECT film_id FROM inventory
WHERE store_id=2
GROUP BY film_id
HAVING COUNT(*) >3)

--Challenge 3
SELECT first_name, last_name FROM customer c
INNER JOIN payment p
ON c.customer_id = p.customer_id
WHERE DATE(payment_date) = '2020-01-25'
--output 136

--Challenge 3(1)
SELECT first_name, last_name FROM customer c
WHERE customer_id IN (SELECT customer_id FROM payment 
					  WHERE DATE(payment_date) = '2020-01-25')
--output 127

--Finding dublicates 136 - 127 = 9
SELECT first_name, last_name
FROM customer c
INNER JOIN payment p
ON c.customer_id = p.customer_id
WHERE DATE(payment_date) = '2020-01-25'
GROUP BY first_name, last_name
HAVING COUNT(*) > 1

--Challenge 3(corrected)
SELECT DISTINCT first_name, last_name FROM customer c
JOIN payment p
ON c.customer_id = p.customer_id
WHERE DATE(payment_date) = '2020-01-25'

--Challenge 4
SELECT * FROM customer
SELECT * FROM payment

SELECT customer_id, SUM(amount) FROM payment
GROUP BY customer_id
HAVING SUM(amount) > 30
ORDER BY customer_id

SELECT first_name, email, p.customer_id, SUM(amount) FROM customer c
INNER JOIN payment p
ON c.customer_id = p.customer_id
GROUP BY first_name, email,p.customer_id
HAVING SUM(amount) > 30
ORDER BY p.customer_id

--Challenge 4(wrong)
SELECT first_name, email FROM customer
WHERE customer_id IN (SELECT customer_id, SUM(amount) FROM payment
					  GROUP BY customer_id
					  HAVING SUM(amount) > 30
					  ORDER BY customer_id)

--Challenge 4(1)
SELECT first_name, email 
FROM customer
WHERE customer_id IN (SELECT customer_id 
					  FROM payment
					  GROUP BY customer_id
					  HAVING SUM(amount) > 30)

--Challenge 5
SELECT first_name, last_name FROM customer
WHERE customer_id IN (SELECT customer_id FROM customer
					  INNER JOIN address
					  ON address.address_id = customer.address_id
					 WHERE district = 'California')
AND customer_id IN (SELECT customer_id FROM payment
					  GROUP BY customer_id
					  HAVING SUM(amount) > 100)

--Challenge 5(to check with JOIN):
SELECT first_name, last_name, district, a.address_id, SUM(amount)	FROM customer c
INNER JOIN address a
ON a.address_id = c.address_id
INNER JOIN payment p
ON p.customer_id = c.customer_id
WHERE district = 'California'
GROUP BY first_name, last_name, district, a.address_id
HAVING SUM(amount) > 100




-- Subqueries in FROM




--Challenge 6
SELECT SUM(amount), DATE(payment_date) pd FROM payment
GROUP BY pd
ORDER BY pd

SELECT ROUND(AVG(total_amount),2)
FROM 
(SELECT SUM(amount) AS total_amount, DATE(payment_date) pd FROM payment
GROUP BY pd) AS subquery

--Challenge 6(1)
SELECT ROUND(AVG(amount_per_day),2) AS daily_rev_avg
FROM 
(SELECT SUM(amount) AS amount_per_day, DATE(payment_date) FROM payment
GROUP BY DATE(payment_date)) A




-- Subqueries in SELECT





SELECT *, 'hello', 3 FROM payment

SELECT *, 'hello' as h, 3 AS three FROM payment

SELECT
*, (SELECT ROUND(AVG(amount),2) FROM payment)
FROM payment

--doesn't work because of multiple values:
SELECT
*, (SELECT amount FROM payment)
FROM payment

SELECT
*, (SELECT amount FROM payment LIMIT 1)
FROM payment

--Challenge 7
SELECT 
*, (SELECT MAX(amount) FROM payment) 
FROM payment

SELECT 
*, (SELECT MAX(amount) FROM payment) - amount AS difference
FROM payment




-- Correlated subqueries




--Correlated Subqueries in WHERE
--Challenge 8
SELECT * FROM payment p1
WHERE amount = (SELECT MAX(amount) FROM payment p2
			   WHERE p1.customer_id = p2.customer_id)

--Challenge 8(1)
SELECT * FROM payment p1
WHERE amount = (SELECT MAX(amount) FROM payment p2
			   WHERE p1.customer_id = p2.customer_id)
ORDER BY customer_id

--Challenge 9
SELECT title, film_id, replacement_cost, rating FROM film f1
WHERE replacement_cost = (SELECT MIN(replacement_cost) FROM film f2
		WHERE f1.rating = f2.rating )

--Challenge 10
SELECT title, film_id, length, rating FROM film f1
WHERE length = (SELECT MAX(length) FROM film f2
			   WHERE f1.rating = f2.rating)

--Correlated Subquery in SELECT
SELECT *,
(SELECT MAX(amount) FROM payment p2
WHERE p1.customer_id=p2.customer_id) 
FROM payment p1

SELECT *,
(SELECT MAX(amount) FROM payment p2
WHERE p1.customer_id=p2.customer_id) 
FROM payment p1
ORDER BY customer_id

--Challenge 11
SELECT *,
(SELECT SUM(amount) FROM payment p2
WHERE p1.customer_id=p2.customer_id) AS sum_amount,
(SELECT COUNT(amount) FROM payment p3
WHERE p1.customer_id=p3.customer_id) AS count_payment
FROM payment p1
ORDER BY customer_id

--Challenge 11(1)
SELECT payment_id,customer_id, staff_id,amount,
(SELECT SUM(amount) AS sum_amount
 FROM payment p2
 WHERE p1.customer_id=p2.customer_id) ,
(SELECT COUNT(amount) AS count_payment 
 FROM payment p2
WHERE p1.customer_id=p2.customer_id) 
FROM payment p1
ORDER BY customer_id, amount DESC

--Challenge 12
SELECT title,replacement_cost,rating,
(SELECT AVG(replacement_cost) FROM film f2
WHERE f1.rating = f2.rating)
FROM film f1
ORDER BY replacement_cost DESC

--Challenge 13
SELECT title,replacement_cost,rating,
(SELECT AVG(replacement_cost) FROM film f2
 WHERE f1.rating = f2.rating)
FROM film f1
WHERE replacement_cost = (SELECT MAX(replacement_cost) FROM film f3
 WHERE f1.rating = f3.rating)



----------DAY 9----------



--CREATE DATABASE




CREATE DATABASE company_y

CREATE DATABASE "company y"

CREATE DATABASE "Company_y"

CREATE DATABASE cmpany_a
	WITH encoding = 'UTF-8' --by default;
	
COMMENT ON DATABASE company_a IS 'That is our database'

CREATE DATABASE customer;
DROP DATABASE customer;


SELECT COUNT(*) FROM film WHERE 'Behind the Scenes'=ANY(special_features)



--CREATE TABLE




CREATE TABLE director (
director_id SERIAL PRIMARY KEY,
director_account_name VARCHAR(20) UNIQUE,
first_name VARCHAR(50),
last_name VARCHAR(50) DEFAULT 'Not specified',
date_of_birth DATE,
address_id INT REFERENCES address(address_id)
)

--Challenge 14
CREATE TABLE online_sales(
transaction_id SERIAL PRIMARY KEY,
customer_id INT REFERENCES customer(customer_id),
film_id INT REFERENCES film(film_id),
amount NUMERIC(5, 2),
promotion_code VARCHAR(10) DEFAULT 'None')

--Challenge 14(1)
CREATE TABLE online_sales(
transaction_id SERIAL PRIMARY KEY,
customer_id INT REFERENCES customer(customer_id),
film_id INT REFERENCES film(film_id),
amount numeric(5, 2) NOT NULL,
promotion_code VARCHAR(10) DEFAULT 'None'
)



--INSERT INTO




INSERT INTO online_sales
VALUES (1, 269, 13, 10.99, 'BUNDLE2022')

INSERT INTO online_sales
(customer_id, film_id, amount)
VALUES (269, 13, 10.99)

INSERT INTO online_sales
(customer_id, film_id, amount)
VALUES (269, 13, 10.99), (270, 12, 22.99)

--Challenge 15
INSERT INTO online_sales
VALUES (7, 124, 65, 14.99, 'PROMO2022'),
(8, 225, 231, 12.99, 'JULYPROMO'),
(9, 119, 53, 15.99, 'SUMMERDEAL')

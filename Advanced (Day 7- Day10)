----------DAY 7----------

--UNIT 
SELECT first_name FROM actor
UNION
SELECT first_name FROM customer
ORDER BY first_name

SELECT first_name FROM actor
UNION ALL
SELECT first_name FROM customer
ORDER BY first_name

SELECT first_name, 'actor' FROM actor
UNION ALL
SELECT first_name, 'customer' FROM customer
ORDER BY first_name

SELECT first_name, 'actor' AS origin FROM actor
UNION
SELECT first_name, 'customer' AS test1 FROM customer
ORDER BY first_name

SELECT first_name, 'actor' AS origin FROM actor
UNION ALL
SELECT first_name, 'customer' FROM customer
ORDER BY first_name

--'origin' doesnt change
SELECT first_name, 'actor' AS origin FROM actor
UNION ALL
SELECT first_name, 'customer' AS test1 FROM customer
ORDER BY first_name

SELECT first_name, 'actor' AS origin FROM actor
UNION
SELECT first_name, 'customer' AS test1 FROM customer
UNION
SELECT first_name, 'staff' FROM staff
ORDER BY first_name

SELECT first_name, 'actor' AS origin FROM actor
UNION
SELECT first_name, 'customer' AS test1 FROM customer
UNION
SELECT first_name, 'staff' FROM staff
ORDER BY 2 DESC

SELECT first_name AS first_name, 'actor' AS origin FROM actor
UNION
SELECT first_name, 'customer' AS test1 FROM customer
UNION
SELECT UPPER(first_name), 'staff' FROM staff
ORDER BY 2 DESC

SELECT * FROM payment

SELECT 
AVG(amount) 
FROM payment

SELECT 
*
FROM payment
WHERE amount > 4.2006673312979002




--Subqueries in WHERE 




SELECT 
* 
FROM payment
WHERE amount > (SELECT AVG(amount) FROM payment)

-- > = < for 1 single value
SELECT
*
FROM payment
WHERE customer_id = (SELECT customer_id FROM customer
					WHERE first_name = 'ADAM')

--doesnt work for list of multiple value
SELECT
*
FROM payment
WHERE customer_id = (SELECT customer_id FROM customer
					WHERE first_name LIKE 'A%')

-- can use IN for multiple value:
SELECT
*
FROM payment
WHERE customer_id IN (SELECT customer_id FROM customer
					WHERE first_name LIKE 'A%')

--Challenge 1
SELECT 
film_id,title, length
FROM film
WHERE length > (SELECT AVG(length) FROM film)

--Challenge 1(1)
SELECT 
*
FROM film
WHERE length > (SELECT AVG(length) FROM film)

--Challenge 2
SELECT COUNT(*), i.film_id, title FROM inventory i
INNER JOIN film f
ON i.film_id = f.film_id
WHERE store_id = 2
GROUP BY i.film_id, title
HAVING COUNT(*) > 3
ORDER BY film_id

--Challenge 2(1)
SELECT * FROM film
WHERE film_id IN
(SELECT film_id FROM inventory
WHERE store_id=2
GROUP BY film_id
HAVING COUNT(*) >3)

--Challenge 3
SELECT first_name, last_name FROM customer c
INNER JOIN payment p
ON c.customer_id = p.customer_id
WHERE DATE(payment_date) = '2020-01-25'
--output 136

--Challenge 3(1)
SELECT first_name, last_name FROM customer c
WHERE customer_id IN (SELECT customer_id FROM payment 
					  WHERE DATE(payment_date) = '2020-01-25')
--output 127

--Challenge 3(2)
select first_name, last_name from customer
where customer_id in (select customer_id from payment where to_char(payment_date, 'YYYY-MM-DD')='2020-01-25')



--Finding dublicates 136 - 127 = 9
SELECT first_name, last_name
FROM customer c
INNER JOIN payment p
ON c.customer_id = p.customer_id
WHERE DATE(payment_date) = '2020-01-25'
GROUP BY first_name, last_name
HAVING COUNT(*) > 1

--Challenge 3(corrected)
SELECT DISTINCT first_name, last_name FROM customer c
JOIN payment p
ON c.customer_id = p.customer_id
WHERE DATE(payment_date) = '2020-01-25'

--Challenge 4
SELECT * FROM customer
SELECT * FROM payment

SELECT customer_id, SUM(amount) FROM payment
GROUP BY customer_id
HAVING SUM(amount) > 30
ORDER BY customer_id

SELECT first_name, email, p.customer_id, SUM(amount) FROM customer c
INNER JOIN payment p
ON c.customer_id = p.customer_id
GROUP BY first_name, email,p.customer_id
HAVING SUM(amount) > 30
ORDER BY p.customer_id

--Challenge 4(wrong)
SELECT first_name, email FROM customer
WHERE customer_id IN (SELECT customer_id, SUM(amount) FROM payment
					  GROUP BY customer_id
					  HAVING SUM(amount) > 30
					  ORDER BY customer_id)

--Challenge 4(1)
SELECT first_name, email 
FROM customer
WHERE customer_id IN (SELECT customer_id 
					  FROM payment
					  GROUP BY customer_id
					  HAVING SUM(amount) > 30)

--Challenge 5
SELECT first_name, last_name FROM customer
WHERE customer_id IN (SELECT customer_id FROM customer
					  INNER JOIN address
					  ON address.address_id = customer.address_id
					 WHERE district = 'California')
AND customer_id IN (SELECT customer_id FROM payment
					  GROUP BY customer_id
					  HAVING SUM(amount) > 100)

--Challenge 5(to check with JOIN):
SELECT first_name, last_name, district, a.address_id, SUM(amount)	FROM customer c
INNER JOIN address a
ON a.address_id = c.address_id
INNER JOIN payment p
ON p.customer_id = c.customer_id
WHERE district = 'California'
GROUP BY first_name, last_name, district, a.address_id
HAVING SUM(amount) > 100




-- Subqueries in FROM




select avg(total_amount)
from
(select customer_id, sum(amount) as total_amount from payment
group by customer_id) as subquery

with subquery as (select customer_id, sum(amount) as total_amount from payment
group by customer_id)
select avg(total_amount)
from subquery

--Challenge 6
SELECT SUM(amount), DATE(payment_date) pd FROM payment
GROUP BY pd
ORDER BY pd

SELECT ROUND(AVG(total_amount),2)
FROM 
(SELECT SUM(amount) AS total_amount, DATE(payment_date) pd FROM payment
GROUP BY pd) AS subquery

--Challenge 6(1)
SELECT ROUND(AVG(amount_per_day),2) AS daily_rev_avg
FROM 
(SELECT SUM(amount) AS amount_per_day, DATE(payment_date) FROM payment
GROUP BY DATE(payment_date)) A




-- Subqueries in SELECT





SELECT *, 'hello', 3 FROM payment

SELECT *, 'hello' as h, 3 AS three FROM payment

SELECT
*, (SELECT ROUND(AVG(amount),2) FROM payment)
FROM payment

--doesn't work because of multiple values:
SELECT
*, (SELECT amount FROM payment)
FROM payment

SELECT
*, (SELECT amount FROM payment LIMIT 1)
FROM payment

--Challenge 7
SELECT 
*, (SELECT MAX(amount) FROM payment) 
FROM payment

SELECT 
*, (SELECT MAX(amount) FROM payment) - amount AS difference
FROM payment




-- Correlated subqueries




--Correlated Subqueries in WHERE
--Challenge 8
SELECT * FROM payment p1
WHERE amount = (SELECT MAX(amount) FROM payment p2
			   WHERE p1.customer_id = p2.customer_id)

--Challenge 8(1)
SELECT * FROM payment p1
WHERE amount = (SELECT MAX(amount) FROM payment p2
			   WHERE p1.customer_id = p2.customer_id)
ORDER BY customer_id

--Challenge 9
SELECT title, film_id, replacement_cost, rating FROM film f1
WHERE replacement_cost = (SELECT MIN(replacement_cost) FROM film f2
		WHERE f1.rating = f2.rating )

--Challenge 10
SELECT title, film_id, length, rating FROM film f1
WHERE length = (SELECT MAX(length) FROM film f2
			   WHERE f1.rating = f2.rating)

--Correlated Subquery in SELECT
SELECT *,
(SELECT MAX(amount) FROM payment p2
WHERE p1.customer_id=p2.customer_id) 
FROM payment p1

SELECT *,
(SELECT MAX(amount) FROM payment p2
WHERE p1.customer_id=p2.customer_id) 
FROM payment p1
ORDER BY customer_id

--Challenge 11
SELECT *,
(SELECT SUM(amount) FROM payment p2
WHERE p1.customer_id=p2.customer_id) AS sum_amount,
(SELECT COUNT(amount) FROM payment p3
WHERE p1.customer_id=p3.customer_id) AS count_payment
FROM payment p1
ORDER BY customer_id

--Challenge 11(1)
SELECT payment_id,customer_id, staff_id,amount,
(SELECT SUM(amount) AS sum_amount
 FROM payment p2
 WHERE p1.customer_id=p2.customer_id) ,
(SELECT COUNT(amount) AS count_payment 
 FROM payment p2
WHERE p1.customer_id=p2.customer_id) 
FROM payment p1
ORDER BY customer_id, amount DESC

--Challenge 12
SELECT title,replacement_cost,rating,
(SELECT AVG(replacement_cost) FROM film f2
WHERE f1.rating = f2.rating)
FROM film f1
ORDER BY replacement_cost DESC

--Challenge 13
SELECT title,replacement_cost,rating,
(SELECT AVG(replacement_cost) FROM film f2
 WHERE f1.rating = f2.rating)
FROM film f1
WHERE replacement_cost = (SELECT MAX(replacement_cost) FROM film f3
 WHERE f1.rating = f3.rating)



----------DAY 9----------



--CREATE DATABASE




CREATE DATABASE company_y

CREATE DATABASE "company y"

CREATE DATABASE "Company_y"

CREATE DATABASE cmpany_a
	WITH encoding = 'UTF-8' --by default;
	
COMMENT ON DATABASE company_a IS 'That is our database'

CREATE DATABASE customer;
DROP DATABASE customer;


SELECT COUNT(*) FROM film WHERE 'Behind the Scenes'=ANY(special_features)



--CREATE TABLE




CREATE TABLE director (
director_id SERIAL PRIMARY KEY,
director_account_name VARCHAR(20) UNIQUE,
first_name VARCHAR(50),
last_name VARCHAR(50) DEFAULT 'Not specified',
date_of_birth DATE,
address_id INT REFERENCES address(address_id)
)

--Challenge 14
CREATE TABLE online_sales(
transaction_id SERIAL PRIMARY KEY,
customer_id INT REFERENCES customer(customer_id),
film_id INT REFERENCES film(film_id),
amount NUMERIC(5, 2),
promotion_code VARCHAR(10) DEFAULT 'None')

--Challenge 14(1)
CREATE TABLE online_sales(
transaction_id SERIAL PRIMARY KEY,
customer_id INT REFERENCES customer(customer_id),
film_id INT REFERENCES film(film_id),
amount numeric(5, 2) NOT NULL,
promotion_code VARCHAR(10) DEFAULT 'None'
)



--INSERT INTO




INSERT INTO online_sales
VALUES (1, 269, 13, 10.99, 'BUNDLE2022')

INSERT INTO online_sales
(customer_id, film_id, amount)
VALUES (269, 13, 10.99)

INSERT INTO online_sales
(customer_id, film_id, amount)
VALUES (269, 13, 10.99), (270, 12, 22.99)

--Challenge 15
INSERT INTO online_sales
VALUES (7, 124, 65, 14.99, 'PROMO2022'),
(8, 225, 231, 12.99, 'JULYPROMO'),
(9, 119, 53, 15.99, 'SUMMERDEAL')




--ALTER TABLE




ALTER TABLE <table name>
ALTER_ACTION

--DROP
ALTER TABLE staff
DROP COLUMN first_name

ALTER TABLE staff
DROP COLUMN IF EXISTS first_name

--ADD
ALTER TABLE staff
ADD COLUMN date_of_birth DATE

ALTER TABLE staff
ADD COLUMN IF NOT EXISTS date_of_birth DATE

--TYPE Changing
ALTER TABLE staff
ADD COLUMN address_id TYPE SMALLINT

--RENAME
ALTER TABLE staff
ADD COLUMN first_name TO name

--DEFAULT
ALTER TABLE staff
ADD COLUMN store_id SET DEFAULT 1

ALTER TABLE staff
ADD COLUMN store_id SET DROP DEFAULT

--SET NOT NULL
ALTER TABLE staff
ADD COLUMN store_id SET NOT NULL

ALTER TABLE staff
ADD COLUMN store_id DROP NOT NULL

--TABLE CONSTRAINT
ALTER TABLE staff
ADD CONSTRAINT <constraint_name> UNIQUE(column1)

ALTER TABLE staff
ADD CONSTRAINT <constraint_name> UNIQUE(column1, column2[,..])

ALTER TABLE staff
ADD CONSTRAINT <constraint_name> 
ADD PRIMARY KEY(column1, column2[,..])

--Combination
ALTER TABLE director
ALTER COLUMN director_account_name SET DEFAULT 3,
ALTER COLUMN first_name TYPE TEXT,
ADD COLUMN middle_name TEXT,
ADD CONSTRAINT constraint_1 UNIQUE(account_name)


--RENAME must uses individually
ALTER TABLE old_table_name
RENAME new_table_name

--Challenge 16
ALTER TABLE director
--change varchar from (20) to varchar(30):
ALTER COLUMN director_account_name TYPE VARCHAR(30),
--drop the default on last_name
ALTER COLUMN last_name DROP DEFAULT,
--add constrain NOT NULL to the last_name:
ADD COLUMN last_name SET NOT NULL,
--add column e-mail with VARCHAR(40):
ADD COLUMN email VARCHAR(40)

ALTER TABLE director
RENAME TO directors

ALTER TABLE directors
RENAME director_account_name TO account_name




--DROP AND TRANCATE TABLE




DROP TABLE table

DROP SCHEMA schema

TRUNCATE TABLE table

TRUNCATE table

--create
CREATE TABLE emp_table
(emp_id SERIAL PRIMARY KEY,
emp_name TEXT)

SELECT * FROM emp_table 

--drop
DROP TABLE emp_table

--insert
INSERT INTO emp_table
VALUES 
(1, 'Frank'),
(2, 'Maria')

--truncate
TRUNCATE TABLE emp_table




--CHECK




CREATE TABLE director(
name TEXT CHECK (length(name)>1))

CREATE TABLE director(
name TEXT CONSTRAINT name_length CHECK (length(name)>1))

--default name <table>_<column>_check
CREATE TABLE director (
name TEXT CHECK (length(name)>1))

--default name:director_start_date_check
CREATE TABLE director(
name TEXT,
date_of_birth DATE,
start_date DATE,
end_date DATE CHECK(start_date > '01-01-2000'))

--default name: director_check
CREATE TABLE director(
name TEXT,
date_of_birth DATE,
start_date DATE,
end_date DATE CHECK(start_date > date_of_birth))

INSERT INTO director
(date_of_birth, start_date)
VALUES ('01-01-1902', '01-01-1900')

ALTER TABLE director
ADD CONSTRAINT date_check CHECK(start_date < end_date)

ALTER TABLE director
DROP CONSTRAIN date_check

ALTER TABLE director
RENAME CONSTRAINT date_check TO data_constraint

--Challenge 17
--1-2
CREATE TABLE songs(
song_id INT PRIMARY KEY,
song_name VARCHAR(30) NOT NULL,
genre VARCHAR(30) DEFAULT 'Not defined',
price NUMERIC(4, 2),
release_date DATE)
--3-4
ALTER TABLE songs
ADD CONSTRAINT CHECK (price >= 1.99)
ADD CONSTRAINT date_check CHECK (
release_date BETWEEN '1950-01-01' AND CURRENT_DATE)
--5
INSERT INTO songs(
song_id, song_name, price, release_date) 
VALUES (4, 'SQL song', 0.99, 2022-01-07)
--6
ALTER TABLE songs
ADD CONSTRAINT CHECK (price >= 0.99)
--7
INSERT INTO songs(
song_id, song_name, price, release_date) 
VALUES (4, 'SQL song', 0.99, 2022-01-07)

--Challenge 17(1)
--1-4
CREATE TABLE songs(
song_id SERIAL PRIMARY KEY,
song_name VARCHAR(30) NOT NULL,
genre VARCHAR(30) DEFAULT 'Not defined',
price numeric(4,2) CHECK (price>=1.99),
release_date DATE CONSTRAINT date_check CHECK(release_date BETWEEN '1950-01-01' AND CURRENT_DATE))
--5
INSERT INTO songs(
song_name, price, release_date) 
VALUES ('SQL song', 0.99, '2022-01-07')
--6delete
ALTER TABLE songs
DROP CONSTRAINT songs_price_check;
--6create
ALTER TABLE songs
ADD CONSTRAINT songs_price_check CHECK (price>=0.99)
--7
INSERT INTO songs(
song_name, price, release_date) 
VALUES ('SQL song', 0.99, '2022-01-07')
--view
SELECT * FROM songs



----------DAY 10----------



--UPDATE
UPDATE songs
SET genre='Country music'

UPDATE songs
SET genre='Pop music'
WHERE song_id=4

UPDATE songs
SET price=song_id+0.99


UPDATE customer
SET last_name='BROWN'
WHERE customer_id=1

SELECT * FROM customer
ORDER BY customer_id ASC

UPDATE customer
SET email=lower(email)

--Challenge 18
SELECT * FROM film
--
UPDATE film
SET rental_rate=1.99
WHERE rental_rate=0.99
--1
ALTER TABLE customer
ADD COLUMN initials VARCHAR(10)
--2
UPDATE customer
SET initials=(LEFT(first_name, 1) || '.' || LEFT(last_name, 1) || '.')

--Challenge 18(1)
--1
ALTER TABLE customer
ADD COLUMN initials VARCHAR(4)




--DELETE




DELETE FROM table
WHERE condition

--delete
DELETE FROM songs
WHERE song_id=5
--create again 5
INSERT INTO songs(
song_id, song_name, price, release_date) 
VALUES (5, 'SQL song', 0.99, '2022-01-07')
--create 6
INSERT INTO songs(
song_id, song_name, price, release_date) 
VALUES (6, 'SQL song', 0.99, '2022-01-07')

--delete 2 rows
DELETE FROM songs
WHERE song_id IN (5,6)

--create again 5 and 6
INSERT INTO songs(
song_id, song_name, price, release_date) 
VALUES (5, 'SQL song', 0.99, '2022-01-07'),
(6, 'SQL song', 0.99, '2022-01-07')

--everething
DELETE FROM songs

--TRANCATE TABLE can not use WHERE, faster for all table than DELETE FROM

DELETE FROM songs
WHERE song_id IN (5,6)

--Show song_id of deleted rows:
DELETE FROM songs
WHERE song_id IN (5,6)
RETURNING song_id

--Show multiple/all rows of deleted:
DELETE FROM songs
WHERE song_id IN (5,6)
RETURNING *

INSERT INTO songs(
song_id, song_name, genre, price, release_date) 
VALUES (5, 'SQL song', 'Country music', 0.99, '2022-01-07'),
(6, 'SQL song', 'Country music', 0.99, '2022-01-07')

INSERT INTO songs(
song_id, song_name, genre, price, release_date) 
VALUES (7,'Have a talk with data', 'Chill out', 5.99, '01-06-2022'),
(8,'Tame the Data', 'Classical', 4.99, '01-06-2020')

DELETE FROM songs
WHERE genre='Country music'
RETURNING song_name, song_id

--Challenge 19
DELETE FROM payment
WHERE payment_id in (17064, 17067)
RETURNING *

--Challenge 19(1)
--check what we deleting:
SELECT * FROM payment
WHERE payment_id in (17064, 17067)
-- delete
DELETE FROM payment
WHERE payment_id in (17064, 17067)
RETURNING *



--CREATE TABLE AS




--create copy of the table:
CREATE TABLE customer_test
AS
SELECT * FROM customer

CREATE TABLE customer1
AS
SELECT customer_id, initials
FROM customer
WHERE first_name LIKE 'C%'

--check
SELECT first_name, last_name, email, address, city
FROM customer c
LEFT JOIN address a
ON c.address_id=a.address_id
LEFT JOIN city ci
ON ci.city_id=a.city_id
--create
CREATE TABLE customer_address
AS
SELECT first_name, last_name, email, address, city
FROM customer c
LEFT JOIN address a
ON c.address_id=a.address_id
LEFT JOIN city ci
ON ci.city_id=a.city_id

--Challenge 20
--check
SELECT first_name || ' ' || last_name AS name, 
SUM(amount) AS total_amount 
FROM customer c
LEFT JOIN payment p
ON c.customer_id = p.customer_id
GROUP BY name
--create
CREATE TABLE customer_spendings
AS
SELECT first_name || ' ' || last_name AS name, 
SUM(amount) AS total_amount 
FROM customer c
LEFT JOIN payment p
ON c.customer_id = p.customer_id
GROUP BY name
ORDER BY total_amount




--CREATE VIEW




CREATE TABLE customer1
AS
SELECT customer_id, initials
FROM customer
WHERE first_name LIKE 'C%'

CREATE VIEW customer2
AS
SELECT customer_id, initials
FROM customer
WHERE first_name LIKE 'C%'

SELECT * FROM customer2

--delete table
DROP TABLE customer_spendings
--create view
CREATE VIEW customer_spendings
AS
SELECT first_name || ' ' || last_name AS name, 
SUM(amount) AS total_amount 
FROM customer c
LEFT JOIN payment p
ON c.customer_id = p.customer_id
GROUP BY name
--view
SELECT * FROM customer_spendings

--Challenge 21
CREATE VIEW films_category 
AS
SELECT title, length, name
FROM film_category fc
LEFT JOIN category c
ON fc.category_id = c.category_id
LEFT JOIN film f
ON f.film_id = fc.film_id
WHERE name IN ('Action', 'Comedy')
ORDER BY length DESC
--check
SELECT * FROM films_category 

--Challenge 21(1)
CREATE VIEW films_category
AS
SELECT 
title,
name,
length
FROM film f
LEFT JOIN film_category fc
ON f.film_id=fc.film_id
LEFT JOIN category c
ON c.category_id=fc.category_id
WHERE name IN ('Action','Comedy')
ORDER BY length DESC




--CREATE MATERIALIZED VIEW




CREATE MATERIALIZED VIEW mv_films_category 
AS
SELECT title, length, name
FROM film_category fc
LEFT JOIN category c
ON fc.category_id = c.category_id
LEFT JOIN film f
ON f.film_id = fc.film_id
WHERE name IN ('Action', 'Comedy')
ORDER BY length DESC
--view
SELECT * FROM mv_films_category 
--update film:
UPDATE film
set length=192
WHERE title='SATURN NAME'
--view again:
SELECT * FROM mv_films_category
--refresh
REFRESH MATERIALIZED VIEW mv_films_category 
--view, its visible now:
SELECT * FROM mv_films_category 




--Managing Views




--DROP VIEW
DROP VIEW customer_anonymous
DROP MATERIALIZED VIEW customer_anonymous

--ALTER VIEW
ALTER VIEW customer_anonymous
RENAME TO v_customer_info

ALTER VIEW customer_name
RENAME COLUMN name TO customer_name

--REPLACE VIEW
CREATE OR REPLACE VIEW v_customer_info
AS new_query

--Challenge 22
CREATE VIEW v_customer_info
AS
SELECT cu.customer_id,
    cu.first_name || ' ' || cu.last_name AS name,
    a.address,
    a.postal_code,
    a.phone,
    city.city,
    country.country
     FROM customer cu
     JOIN address a ON cu.address_id = a.address_id
     JOIN city ON a.city_id = city.city_id
     JOIN country ON city.country_id = country.country_id
ORDER BY customer_id
--1)
ALTER VIEW v_customer_info
RENAME TO v_customer_information
--2)
ALTER VIEW v_customer_information
RENAME COLUMN customer_id TO c_id
--3)
CREATE OR REPLACE VIEW v_customer_information
AS
SELECT 
    cu.customer_id as c_id,
    cu.first_name || ' ' || cu.last_name AS name,
    a.address,
    a.postal_code,
    a.phone,
    city.city,
    country.country,
    CONCAT(LEFT(cu.first_name,1),LEFT(cu.last_name,1)) as initials
FROM customer cu
JOIN address a ON cu.address_id = a.address_id
JOIN city ON a.city_id = city.city_id
JOIN country ON city.country_id = country.country_id
ORDER BY c_id
--check:
SELECT * FROM v_customer_information



--Import & Export



CREATE TABLE sales (
transaction_id SERIAL PRIMARY KEY,
customer_id INT,
payment_type VARCHAR(20),
creditcard_no VARCHAR(20),
cost DECIMAL(5,2),
quantity INT,
price DECIMAL(5,2))

----------Lesson 11----------



--OVER PARTITION BY



SELECT
*,
SUM(amount) OVER(PARTITION BY customer_id)
FROM payment

SELECT
*,
SUM(amount) OVER(PARTITION BY customer_id)
FROM payment
ORDER BY 1

SELECT
*,
COUNT(*) OVER(PARTITION BY customer_id)
FROM payment
ORDER BY 1

SELECT
*,
COUNT(*) OVER(PARTITION BY customer_id,staff_id)
FROM payment
ORDER BY 1

SELECT
*,
COUNT(*) OVER()
FROM payment
ORDER BY 1

SELECT
*,
ROUND(AVG(amount) OVER(),2)
FROM payment
ORDER BY 1

--Challenge 1
SELECT f.film_id, title, length as length_of_movie, name as category, 
ROUND(AVG(length) OVER(PARTITION BY name),2) FROM film f
LEFT JOIN film_category fc
ON f.film_id = fc.film_id
LEFT JOIN category c
ON c.category_id = fc.category_id
ORDER BY film_id

--Challenge 1(1)
SELECT 
f.film_id, 
title, 
name as category, 
length as length_of_movie,  
ROUND(AVG(length) OVER(PARTITION BY name),2) AS avg_length_in_category FROM film f
LEFT JOIN film_category fc
ON f.film_id = fc.film_id
LEFT JOIN category c
ON c.category_id = fc.category_id
ORDER BY 1

--Challenge 2
SELECT *,
COUNT(*) OVER(PARTITION BY customer_id, amount)AS no_payments_with_that_amount FROM payment
ORDER BY no_payments_with_that_amount

--Challenge 2(1)
SELECT *,
COUNT(*) OVER(PARTITION BY amount, customer_id)AS no_payments_with_that_amount FROM payment
ORDER BY customer_id



--OVER (ORDER BY)



SELECT *,
SUM(amount) OVER(ORDER BY payment_date)
FROM payment

SELECT *,
SUM(amount) OVER(ORDER BY payment_id)
FROM payment

SELECT *,
SUM(amount) OVER(PARTITION BY customer_id ORDER BY payment_id)
FROM payment

SELECT *,
SUM(amount) 
	OVER(PARTITION BY customer_id 
		 ORDER BY payment_date, payment_id)
FROM payment

--Challenge 3
SELECT flight_id, departure_airport,
SUM(actual_arrival-scheduled_arrival)OVER(ORDER BY flight_id)
FROM flights

--Challenge 4
SELECT 
flight_id, 
departure_airport,
SUM(actual_arrival-scheduled_arrival)
OVER(PARTITION BY departure_airport ORDER BY flight_id)
FROM flights



--RANK



SELECT 
f.title,
c.name,
f.length
FROM film f
LEFT JOIN film_category fc ON f.film_id = fc.film_id
LEFT JOIN category c ON c.category_id = fc.category_id

SELECT 
f.title,
c.name,
f.length,
RANK() OVER(ORDER BY length)
FROM film f
LEFT JOIN film_category fc ON f.film_id = fc.film_id
LEFT JOIN category c ON c.category_id = fc.category_id

SELECT 
f.title,
c.name,
f.length,
RANK() OVER(ORDER BY length DESC)
FROM film f
LEFT JOIN film_category fc ON f.film_id = fc.film_id
LEFT JOIN category c ON c.category_id = fc.category_id

SELECT 
f.title,
c.name,
f.length,
DENSE_RANK() OVER(ORDER BY length DESC)
FROM film f
LEFT JOIN film_category fc ON f.film_id = fc.film_id
LEFT JOIN category c ON c.category_id = fc.category_id

SELECT 
f.title,
c.name,
f.length,
DENSE_RANK() OVER(PARTITION BY name ORDER BY length DESC)
FROM film f
LEFT JOIN film_category fc ON f.film_id = fc.film_id
LEFT JOIN category c ON c.category_id = fc.category_id

--can not use where for window functions:
SELECT 
f.title,
c.name,
f.length,
DENSE_RANK() OVER(PARTITION BY name ORDER BY length DESC)
FROM film f
LEFT JOIN film_category fc ON f.film_id = fc.film_id
LEFT JOIN category c ON c.category_id = fc.category_id
WHERE (DENSE_RANK() OVER(PARTITION BY name ORDER BY length DESC)) = 1
--ERROR:  window functions are not allowed in WHERE
--LINE 9: WHERE (DENSE_RANK() OVER(PARTITION BY name ORDER BY length D...

SELECT * FROM 
(
	SELECT 
	f.title,
	c.name,
	f.length,
	DENSE_RANK() OVER(PARTITION BY name ORDER BY length DESC) as rank
	FROM film f
	LEFT JOIN film_category fc ON f.film_id = fc.film_id
	LEFT JOIN category c ON c.category_id = fc.category_id
) a
WHERE rank=1

--Challenge 5
SELECT first_name ||' '||last_name, country, count(amount) FROM customer c
JOIN address a
ON c.address_id = a.address_id
JOIN city ci
ON a.city_id = ci.city_id
JOIN country co
ON ci.country_id = co.country_id
JOIN payment p
ON c.customer_id = p.customer_id
GROUP BY first_name, last_name, country

--Challenge 5(1)
SELECT name, country, count(amount) FROM customer_list cl
LEFT JOIN payment p
ON cl.id = p.customer_id
GROUP BY name, country

--Challenge 5(2)
SELECT name, country, COUNT(*)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country

--Challenge 6
SELECT first_name ||' '||last_name, country, count(amount),
RANK() OVER(ORDER BY country)
FROM customer c
JOIN address a
ON c.address_id = a.address_id
JOIN city ci
ON a.city_id = ci.city_id
JOIN country co
ON ci.country_id = co.country_id
JOIN payment p
ON c.customer_id = p.customer_id
GROUP BY first_name, last_name, country

--Challenge 6(1)
SELECT name, country, count(amount),
RANK() OVER(ORDER BY country)
FROM customer_list cl
LEFT JOIN payment p
ON cl.id = p.customer_id
GROUP BY name, country

--Challenge 6(2)-1
SELECT * FROM
(
SELECT name, country, COUNT(*),
RANK() OVER(PARTITION BY country ORDER BY COUNT(*) DESC)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country
	) a
	WHERE rank IN (1, 2, 3)

--Challenge 6(2)-2
SELECT * FROM
(
SELECT name, country, COUNT(*),
RANK() OVER(PARTITION BY country ORDER BY COUNT(*) DESC)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country
	) a
	WHERE rank BETWEEN 1 AND 3


----------Day 11----------



--OVER PARTITION BY



SELECT
*,
SUM(amount) OVER(PARTITION BY customer_id)
FROM payment

SELECT
*,
SUM(amount) OVER(PARTITION BY customer_id)
FROM payment
ORDER BY 1

SELECT
*,
COUNT(*) OVER(PARTITION BY customer_id)
FROM payment
ORDER BY 1

SELECT
*,
COUNT(*) OVER(PARTITION BY customer_id,staff_id)
FROM payment
ORDER BY 1

SELECT
*,
COUNT(*) OVER()
FROM payment
ORDER BY 1

SELECT
*,
ROUND(AVG(amount) OVER(),2)
FROM payment
ORDER BY 1

--Challenge 1
SELECT f.film_id, title, length as length_of_movie, name as category, 
ROUND(AVG(length) OVER(PARTITION BY name),2) FROM film f
LEFT JOIN film_category fc
ON f.film_id = fc.film_id
LEFT JOIN category c
ON c.category_id = fc.category_id
ORDER BY film_id

--Challenge 1(1)
SELECT 
f.film_id, 
title, 
name as category, 
length as length_of_movie,  
ROUND(AVG(length) OVER(PARTITION BY name),2) AS avg_length_in_category FROM film f
LEFT JOIN film_category fc
ON f.film_id = fc.film_id
LEFT JOIN category c
ON c.category_id = fc.category_id
ORDER BY 1

--Challenge 2
SELECT *,
COUNT(*) OVER(PARTITION BY customer_id, amount)AS no_payments_with_that_amount FROM payment
ORDER BY no_payments_with_that_amount

--Challenge 2(1)
SELECT *,
COUNT(*) OVER(PARTITION BY amount, customer_id)AS no_payments_with_that_amount FROM payment
ORDER BY customer_id



--OVER (ORDER BY)



SELECT *,
SUM(amount) OVER(ORDER BY payment_date)
FROM payment

SELECT *,
SUM(amount) OVER(ORDER BY payment_id)
FROM payment

SELECT *,
SUM(amount) OVER(PARTITION BY customer_id ORDER BY payment_id)
FROM payment

SELECT *,
SUM(amount) 
	OVER(PARTITION BY customer_id 
		 ORDER BY payment_date, payment_id)
FROM payment

--Challenge 3
SELECT flight_id, departure_airport,
SUM(actual_arrival-scheduled_arrival)OVER(ORDER BY flight_id)
FROM flights

--Challenge 4
SELECT 
flight_id, 
departure_airport,
SUM(actual_arrival-scheduled_arrival)
OVER(PARTITION BY departure_airport ORDER BY flight_id)
FROM flights



--RANK



SELECT 
f.title,
c.name,
f.length
FROM film f
LEFT JOIN film_category fc ON f.film_id = fc.film_id
LEFT JOIN category c ON c.category_id = fc.category_id

SELECT 
f.title,
c.name,
f.length,
RANK() OVER(ORDER BY length)
FROM film f
LEFT JOIN film_category fc ON f.film_id = fc.film_id
LEFT JOIN category c ON c.category_id = fc.category_id

SELECT 
f.title,
c.name,
f.length,
RANK() OVER(ORDER BY length DESC)
FROM film f
LEFT JOIN film_category fc ON f.film_id = fc.film_id
LEFT JOIN category c ON c.category_id = fc.category_id

SELECT 
f.title,
c.name,
f.length,
DENSE_RANK() OVER(ORDER BY length DESC)
FROM film f
LEFT JOIN film_category fc ON f.film_id = fc.film_id
LEFT JOIN category c ON c.category_id = fc.category_id

SELECT 
f.title,
c.name,
f.length,
DENSE_RANK() OVER(PARTITION BY name ORDER BY length DESC)
FROM film f
LEFT JOIN film_category fc ON f.film_id = fc.film_id
LEFT JOIN category c ON c.category_id = fc.category_id

--can not use where for window functions:
SELECT 
f.title,
c.name,
f.length,
DENSE_RANK() OVER(PARTITION BY name ORDER BY length DESC)
FROM film f
LEFT JOIN film_category fc ON f.film_id = fc.film_id
LEFT JOIN category c ON c.category_id = fc.category_id
WHERE (DENSE_RANK() OVER(PARTITION BY name ORDER BY length DESC)) = 1
--ERROR:  window functions are not allowed in WHERE
--LINE 9: WHERE (DENSE_RANK() OVER(PARTITION BY name ORDER BY length D...

SELECT * FROM 
(
	SELECT 
	f.title,
	c.name,
	f.length,
	DENSE_RANK() OVER(PARTITION BY name ORDER BY length DESC) as rank
	FROM film f
	LEFT JOIN film_category fc ON f.film_id = fc.film_id
	LEFT JOIN category c ON c.category_id = fc.category_id
) a
WHERE rank=1

--Challenge 5
SELECT first_name ||' '||last_name, country, count(amount) FROM customer c
JOIN address a
ON c.address_id = a.address_id
JOIN city ci
ON a.city_id = ci.city_id
JOIN country co
ON ci.country_id = co.country_id
JOIN payment p
ON c.customer_id = p.customer_id
GROUP BY first_name, last_name, country

--Challenge 5(1)
SELECT name, country, count(amount) FROM customer_list cl
LEFT JOIN payment p
ON cl.id = p.customer_id
GROUP BY name, country

--Challenge 5(2)
SELECT name, country, COUNT(*)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country

--Challenge 6
SELECT first_name ||' '||last_name, country, count(amount),
RANK() OVER(ORDER BY country)
FROM customer c
JOIN address a
ON c.address_id = a.address_id
JOIN city ci
ON a.city_id = ci.city_id
JOIN country co
ON ci.country_id = co.country_id
JOIN payment p
ON c.customer_id = p.customer_id
GROUP BY first_name, last_name, country

--Challenge 6(1)
SELECT name, country, count(amount),
RANK() OVER(ORDER BY country)
FROM customer_list cl
LEFT JOIN payment p
ON cl.id = p.customer_id
GROUP BY name, country

--Challenge 6(2)-1
SELECT * FROM
(
SELECT name, country, COUNT(*),
RANK() OVER(PARTITION BY country ORDER BY COUNT(*) DESC)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country
	) a
	WHERE rank IN (1, 2, 3)

--Challenge 6(2)-2
SELECT * FROM
(
SELECT name, country, COUNT(*),
RANK() OVER(PARTITION BY country ORDER BY COUNT(*) DESC)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country
	) a
	WHERE rank BETWEEN 1 AND 3



--FIRST_VALUE()




SELECT name, country, COUNT(*),
RANK() OVER(PARTITION BY country ORDER BY COUNT(*) DESC)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country

SELECT name, country, COUNT(*),
first_value(name) OVER(PARTITION BY country ORDER BY COUNT(*) DESC)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country

SELECT name, country, COUNT(*),
first_value(COUNT(*)) OVER(PARTITION BY country ORDER BY COUNT(*) DESC)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country

SELECT name, country, COUNT(*),
first_value(COUNT(*)) OVER(PARTITION BY country ORDER BY COUNT(*) ASC)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country

SELECT name, country, COUNT(*),
first_value(COUNT(*)) OVER(PARTITION BY country ORDER BY COUNT(*) ASC),
count(*)- first_value(COUNT(*)) OVER(PARTITION BY country ORDER BY COUNT(*) ASC)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country



###?????
SELECT * FROM
(
SELECT name, country, COUNT(*),
FIRST_VALUE(name) OVER(PARTITION BY country ORDER BY COUNT(*) DESC)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country
	) a

SELECT * FROM
(
SELECT name, country, COUNT(*),
FIRST_VALUE(COUNT(*)) OVER(PARTITION BY country ORDER BY COUNT(*) DESC)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country
	) a

SELECT * FROM
(
SELECT name, country, COUNT(*),
FIRST_VALUE(COUNT(*)) OVER(PARTITION BY country ORDER BY COUNT(*))
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country
	) a

SELECT * FROM
(
SELECT name, country, COUNT(*),
FIRST_VALUE(COUNT(*)) OVER(PARTITION BY country ORDER BY COUNT(*)),
COUNT(*) - FIRST_VALUE(COUNT(*)) OVER(PARTITION BY country ORDER BY COUNT(*))
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country
	) a
###???




--LEAD & LAG




SELECT name, country, COUNT(*),
lead(name) OVER(PARTITION BY country ORDER BY COUNT(*) ASC)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country

SELECT name, country, COUNT(*),
lead(count(*)) OVER(PARTITION BY country ORDER BY COUNT(*) ASC)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country

SELECT name, country, COUNT(*),
lead(count(*)) OVER(PARTITION BY country ORDER BY COUNT(*) ASC),
lead(count(*)) OVER(PARTITION BY country ORDER BY COUNT(*) ASC)-count(*)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country

SELECT name, country, COUNT(*),
lag(count(*)) OVER(PARTITION BY country ORDER BY COUNT(*) ASC),
lag(count(*)) OVER(PARTITION BY country ORDER BY COUNT(*) ASC)-count(*)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country

--Challenge 7
select sum(amount), date(payment_date),
lag(sum(amount)) over(order by date(payment_date)) as previous_day,
sum(amount)-lag(sum(amount)) over(order by date(payment_date)) as difference,
round((sum(amount)-lag(sum(amount)) over(order by date(payment_date)))/lag(sum(amount)) over(order by date(payment_date))*100,2) as percentage_growth 
from payment
group by 2



?????
SELECT * FROM
(
SELECT name, country, COUNT(*),
LEAD(name) OVER(PARTITION BY country ORDER BY COUNT(*))
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country
	) a

SELECT * FROM
(
SELECT name, country, COUNT(*),
LEAD(COUNT(*)) OVER(PARTITION BY country ORDER BY COUNT(*))
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country
	) a

SELECT * FROM
(
SELECT name, country, COUNT(*),
LEAD(COUNT(*)) OVER(PARTITION BY country ORDER BY COUNT(*)),
LEAD(COUNT(*)) OVER(PARTITION BY country ORDER BY COUNT(*))-COUNT(*)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country
	) a

SELECT * FROM
(
SELECT name, country, COUNT(*),
LAG(COUNT(*)) OVER(PARTITION BY country ORDER BY COUNT(*)),
LAG(COUNT(*)) OVER(PARTITION BY country ORDER BY COUNT(*))-COUNT(*)
FROM customer_list cl
LEFT JOIN payment p
ON id = customer_id
GROUP BY name, country
	) a

--Challenge 7
SELECT SUM(amount), DATE(payment_date) AS day,
LAG(SUM(amount)) OVER(ORDER BY DATE(payment_date)) AS previous_day,
SUM(amount)-LAG(SUM(amount)) OVER(ORDER BY DATE(payment_date)) AS difference,
ROUND (
	(SUM(amount)-LAG(SUM(amount)) OVER(ORDER BY DATE(payment_date)))
	/
	(LAG(SUM(amount)) OVER(ORDER BY DATE(payment_date)))
	*100
	,2
	) AS persent_growth
FROM payment
GROUP BY DATE(payment_date)

--Challenge 7(1)
SELECT SUM(amount), DATE(payment_date) AS day,
LAG(SUM(amount)) OVER(ORDER BY DATE(payment_date)) AS previous_day,
SUM(amount)-LAG(SUM(amount)) OVER(ORDER BY DATE(payment_date)) AS difference,
ROUND ((SUM(amount)-LAG(SUM(amount)) OVER(ORDER BY DATE(payment_date)))
	/
	(LAG(SUM(amount)) OVER(ORDER BY DATE(payment_date)))*100,2) AS persent_growth
FROM payment
GROUP BY DATE(payment_date)




----------DAY 12 ----------




--GROUPING SETS



SELECT staff_id, SUM(amount)
FROM payment
GROUP BY staff_id

SELECT TO_CHAR(payment_date, 'Month'),
SUM(amount)
FROM payment
GROUP BY TO_CHAR(payment_date, 'Month')

SELECT TO_CHAR(payment_date, 'Month'),
staff_id,
SUM(amount)
FROM payment
GROUP BY TO_CHAR(payment_date, 'Month'), staff_id

SELECT
NULL as month,
staff_id, SUM(amount)
FROM payment
GROUP BY staff_id
UNION
SELECT TO_CHAR(payment_date, 'Month') AS month,
NULL as staff_id,
SUM(amount)
FROM payment
GROUP BY TO_CHAR(payment_date, 'Month')

SELECT
TO_CHAR(payment_date,'Month') as month,
staff_id,
SUM(amount)
FROM payment
GROUP BY
	GROUPING SETS (
		(staff_id),
		(month),
		(staff_id, month))
ORDER BY 1,2

--Challenge 8
SELECT first_name, last_name, staff_id, SUM(amount) FROM payment p
LEFT JOIN customer c
ON p.customer_id = c.customer_id
GROUP BY 
	GROUPING SETS (
		(first_name, last_name),
		(first_name, last_name, staff_id)
		)
ORDER BY first_name, last_name, staff_id

--Challenge 9
SELECT first_name, last_name, staff_id, SUM(amount) AS total,
ROUND(100*SUM(amount)/FIRST_VALUE(SUM(amount)) OVER(PARTITION BY first_name, last_name ORDER BY SUM(amount) DESC), 2) as percentage 
FROM customer c
LEFT JOIN payment p
ON c.customer_id = p.customer_id
GROUP BY 
	GROUPING SETS (
		(first_name, last_name),
		(first_name, last_name, staff_id)
		)
ORDER BY first_name, last_name, staff_id



--ROLLUP



SELECT 
 'Q'||TO_CHAR(payment_date, 'Q') as quarter,
 EXTRACT(month from payment_date) as month,
 DATE(payment_date),
 SUM(amount)
FROM payment
GROUP BY
ROLLUP(
'Q'||TO_CHAR(payment_date, 'Q'),
 EXTRACT(month from payment_date),
 DATE(payment_date)
)
ORDER BY 1, 2, 3

--Challenge 10(weeks of the month)
SELECT 
'Q'||TO_CHAR(book_date, 'Q') as quarter,
EXTRACT(month from book_date) as month,
TO_CHAR(book_date, 'W') as week_in_month,
DATE(book_date),
SUM(total_amount) as booking_amount
FROM bookings
GROUP BY
ROLLUP(
	'Q'||TO_CHAR(book_date, 'Q'),
	EXTRACT(month from book_date),
	TO_CHAR(book_date, 'W'),
	DATE(book_date)
	)
ORDER BY 1, 2, 3, 4

--Challenge 10-1(weeks of the year)
SELECT 
'Q'||TO_CHAR(book_date, 'Q') as quarter,
EXTRACT(month from book_date) as month,
EXTRACT(week from book_date) as week,
DATE(book_date),
SUM(total_amount) as booking_amount
FROM bookings
GROUP BY
ROLLUP(
	'Q'||TO_CHAR(book_date, 'Q'),
	EXTRACT(month from book_date),
	EXTRACT(week from book_date),
	DATE(book_date)
	)
ORDER BY 1, 2, 3, 4





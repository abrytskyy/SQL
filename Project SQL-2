Question 1:
Level: Simple
Topic: DISTINCT
Task: Create a list of all the different (distinct) replacement costs of the films.
Question: What's the lowest replacement cost?
Answer: 9.99

--Solution 1.1
SELECT replacement_cost rc FROM film
GROUP BY rc
ORDER BY rc

--Solution 1.2
SELECT DISTINCT replacement_cost 
FROM film
ORDER BY 1




Question 2:
Level: Moderate
Topic: CASE + GROUP BY
Task: Write a query that gives an overview of how many films have replacements costs in the following cost ranges
low: 9.99 - 19.99
medium: 20.00 - 24.99
high: 25.00 - 29.99
Question: How many films have a replacement cost in the "low" group?
Answer: 514

--Solution 2
SELECT
  cost_group,
  COUNT(*) AS film_count
FROM (
  SELECT
    CASE
      WHEN replacement_cost BETWEEN 9.99 AND 19.99 THEN 'low'
      WHEN replacement_cost BETWEEN 20.00 AND 24.99 THEN 'medium'
      WHEN replacement_cost BETWEEN 25.00 AND 29.99 THEN 'high'
    END AS cost_group
  FROM
    film
) AS categorized_films
GROUP BY
  cost_group, categorized_films




Question 3:
Level: Moderate
Topic: JOIN
Task: Create a list of the film titles including their title, length, and category name ordered descendingly by length. Filter the results to only the movies in the category 'Drama' or 'Sports'.
Question: In which category is the longest film and how long is it?
Answer: Sports and 184

--Solution 3
SELECT title, length, name from film f
LEFT JOIN film_category fc
ON f.film_id = fc.film_id
LEFT JOIN category c
ON fc.category_id = c.category_id
WHERE name IN ('Drama', 'Sports')
ORDER BY length DESC

--Solution 3(1)
WHERE name = 'Sports' OR name = 'Drama'




Question 4:
Level: Moderate
Topic: JOIN & GROUP BY
Task: Create an overview of how many movies (titles) there are in each category (name).
Question: Which category (name) is the most common among the films?
Answer: Sports with 74 titles

--Solution 4 
SELECT COUNT(title), name from film f
LEFT JOIN film_category fc
ON f.film_id = fc.film_id
LEFT JOIN category c
ON fc.category_id = c.category_id
GROUP BY name
ORDER BY COUNT(title) DESC

--Solution 4(1)
ORDER BY 1 DESC




Question 5:
Level: Moderate
Topic: JOIN & GROUP BY
Task: Create an overview of the actors' first and last names and in how many movies they appear in.
Question: Which actor is part of most movies??
Answer: Susan Davis with 54 movies

--Solution 5
SELECT first_name, last_name, COUNT(*) FROM actor a
LEFT JOIN film_actor fa
ON a.actor_id = fa.actor_id
GROUP BY first_name, last_name
ORDER BY 3 DESC

--Solution 5(1)
SELECT 
first_name,
last_name,
COUNT(*)
FROM actor a
LEFT JOIN film_actor fa
ON fa.actor_id=a.actor_id
LEFT JOIN film f
ON fa.film_id=f.film_id
GROUP BY first_name, last_name
ORDER BY COUNT(*) DESC




Question 6:
Level: Moderate
Topic: LEFT JOIN & FILTERING
Task: Create an overview of the addresses that are not associated to any customer.
Question: How many addresses are that?
Answer: 4

--Solution 6
SELECT * FROM address a
LEFT JOIN customer c
ON c.address_id = a.address_id
WHERE c.address_id IS null

--Solution 6.1
SELECT * FROM address
WHERE address2 IS null

--Solution 6(1)
SELECT * FROM address a
LEFT JOIN customer c
ON c.address_id = a.address_id
WHERE c.first_name IS null




Question 7:
Level: Moderate
Topic: JOIN & GROUP BY
Task: Create an overview of the cities and how much sales (sum of amount) have occurred there.
Question: Which city has the most sales?
Answer: Cape Coral with a total amount of 221.55

--Solution 7
SELECT c.city, SUM(amount) sum_of_amount FROM city c
LEFT JOIN customer_address ca
ON c.city = ca.city
LEFT JOIN customer cu
ON cu.first_name = ca.first_name AND cu.last_name = ca.last_name
LEFT JOIN payment p
ON p.customer_id = cu.customer_id
GROUP BY c.city
ORDER BY sum_of_amount DESC

--Solution 7(1)
SELECT 
city,
SUM(amount)
FROM payment p
LEFT JOIN customer c
ON p.customer_id=c.customer_id
LEFT JOIN address a
ON a.address_id=c.address_id
LEFT JOIN city ci
ON ci.city_id=a.city_id
GROUP BY city
ORDER BY SUM(amount) DESC




Question 8:
Level: Moderate to difficult
Topic: JOIN & GROUP BY
Task: Create an overview of the revenue (sum of amount) grouped by a column in the format "country, city".
Question: Which country, city has the least sales?
Answer: United States, Tallahassee with a total amount of 50.85.

--Solution 8
SELECT 
country, city,
SUM(amount)
FROM payment p
LEFT JOIN customer c
ON p.customer_id=c.customer_id
LEFT JOIN address a
ON a.address_id=c.address_id
LEFT JOIN city ci
ON ci.city_id=a.city_id
LEFT JOIN country co
ON co.country_id=ci.country_id
GROUP BY country, city
ORDER BY SUM(amount)

----Solution 8(1)
SELECT 
country || ',' ||city AS country_city,
SUM(amount)
FROM payment p
LEFT JOIN customer c
ON p.customer_id=c.customer_id
LEFT JOIN address a
ON a.address_id=c.address_id
LEFT JOIN city ci
ON ci.city_id=a.city_id
LEFT JOIN country co
ON co.country_id=ci.country_id
GROUP BY country_city
ORDER BY SUM(amount)




Question 9:
Level: Difficult
Topic: Uncorrelated subquery
Task: Create a list with the average of the sales amount each staff_id has per customer.
Question: Which staff_id makes on average more revenue per customer?
Answer: staff_id 2 with an average revenue of 56.64 per customer.

--Solution 9
SELECT staff_id, ROUND(SUM(amount)/COUNT(DISTINCT customer_id),2)  FROM payment
GROUP BY staff_id

--Solution 9(1)
SELECT
staff_id, ROUND(AVG(total),2) FROM
(SELECT staff_id, customer_id, SUM(amount) total FROM payment
GROUP BY staff_id, customer_id
ORDER BY 2) sub 
GROUP BY staff_id




Question 10:
Level: Difficult to very difficult
Topic: EXTRACT + Uncorrelated subquery
Task: Create a query that shows average daily revenue of all Sundays.
Question: What is the daily average revenue of all Sundays?
Answer: 1410.65

--Solution 10
SELECT
ROUND(AVG(total),2)
FROM(SELECT 
DATE(payment_date), 
EXTRACT(dow from payment_date),
SUM(amount) AS total
FROM payment
WHERE EXTRACT(dow from payment_date) = 0
GROUP BY DATE(payment_date),EXTRACT(dow from payment_date)) sub




Question 11:
Level: Difficult to very difficult
Topic: Correlated subquery
Task: Create a list of movies - with their length and their replacement cost - that are longer than the average length in each replacement cost group.
Question: Which two movies are the shortest on that list and how long are they?
Answer: CELEBRITY HORN and SEATTLE EXPECTATIONS with 110 minutes.

--Solution 11
SELECT f.title, f.length, f.replacement_cost FROM film f
WHERE f.length > (SELECT AVG(f2.length) FROM film f2 WHERE f.replacement_cost = f2.replacement_cost)
ORDER BY f.length
LIMIT 2

--Solution 11(1)
SELECT title, length, replacement_cost FROM film f
WHERE length > (SELECT AVG(length) FROM film f2 WHERE f.replacement_cost = f2.replacement_cost)
ORDER BY f.length
LIMIT 2




Question 12:
Level: Very difficult
Topic: Uncorrelated subquery
Task: Create a list that shows the "average customer lifetime value" grouped by the different districts.
Example:
If there are two customers in "District 1" where one customer has a total (lifetime) spent of $1000 and the second customer has a total spent of 
$2000 then the "average customer lifetime spent" in this district is $1500.
So, first, you need to calculate the total per customer and then the average of these totals per district.
Question: Which district has the highest average customer lifetime value?
Answer: Saint-Denis with an average customer lifetime value of 216.54.

--Solution 12
SELECT ROUND(AVG(sum_customer_per_district), 2) AS avg, district FROM
(SELECT c.customer_id, district, SUM(p.amount) AS sum_customer_per_district FROM customer c
JOIN address a
ON c.address_id = a.address_id
JOIN payment p
ON p.customer_id = c.customer_id
GROUP BY district, c.customer_id
ORDER BY district) sub
GROUP BY district
ORDER BY avg DESC
LIMIT 1

--Solution 12(1)
SELECT
district,
ROUND(AVG(total),2) total
FROM
	(SELECT 
	district, 
	c.customer_id,
	SUM(amount) total 
	FROM payment p
	INNER JOIN customer c
	ON p.customer_id=c.customer_id
	INNER JOIN address a
	ON a.address_id=c.address_id
	GROUP BY district, c.customer_id) sub
GROUP BY district
ORDER BY 2 DESC




Question 13:
Level: Very difficult
Topic: Correlated query
Task: Create a list that shows all payments including the payment_id, amount, and the film category (name) plus the total amount 
that was made in this category. Order the results ascendingly by the category (name) and as second order criterion by the payment_id ascendingly.
Question: What is the total revenue of the category 'Action' and what is the lowest payment_id in that category 'Action'?
Answer: Total revenue in the category 'Action' is 4375.85 and the lowest payment_id in that category is 16055.

--Solution 13(Task)
SELECT payment_id, amount, name AS film_category, total_amount FROM payment p
JOIN rental r
ON p.customer_id = r.customer_id
JOIN inventory i
ON r.inventory_id = i.inventory_id
JOIN film_category fc
ON i.film_id = fc.film_id
JOIN category c
ON fc.category_id = c.category_id
JOIN (SELECT SUM(amount) AS total_amount, name AS film_category FROM payment p
	JOIN rental r
	ON p.customer_id = r.customer_id
	JOIN inventory i
	ON r.inventory_id = i.inventory_id
	JOIN film_category fc
	ON i.film_id = fc.film_id
	JOIN category c
	ON fc.category_id = c.category_id
	GROUP BY film_category) sub
ON c.name = sub.film_category
ORDER BY c.name, p.payment_id

--Solution13(1)
SELECT
title,
amount,
payment_id,
name

FROM payment p
LEFT JOIN rental r
ON r.rental_id = p.rental_id
LEFT JOIN inventory i
ON i.inventory_id=r.inventory_id
LEFT JOIN film f
ON f.film_id=i.film_id
LEFT JOIN film_category fc
ON fc.film_id=f.film_id
LEFT JOIN category c
ON c.category_id=fc.category_id


Bonus question 14:
Level: Extremely difficult
Topic: Correlated and uncorrelated subqueries (nested)
Task: Create a list with the top overall revenue of a film title (sum of amount per title) for each category (name).
Question: Which is the top-performing film in the animation category?
Answer: DOGMA FAMILY with 178.70.

SELECT title, amount, name from film f
JOIN inventory i
ON f.film_id = i.film_id
JOIN rental r
ON r.inventory_id = i.inventory_id
JOIN payment p
ON p.rental_id = r.rental_id
JOIN film_category fc
ON fc.film_id = f.film_id
JOIN category c
ON c.category_id = c.category_id
ORDER BY title

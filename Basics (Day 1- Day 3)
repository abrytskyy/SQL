/*DAY 1*/

 


--SELECT



SELECT 
*
FROM actor

SELECT
first_name,
last_name
FROM actor

#1
SELECT 
first_name
last_name,
email
FROM customer



--ORDER BY



SELECT 
first_name,
last_name
FROM actor
ORDER BY first_name ASC/ , last_name DESC

#2
SELECT
first_name,
last_name
FROM customer
ORDER BY last_name/2 DESC, first_name/1 DESC



-- SELECT DISTINCT



SELECT DISTINCT
first_name,
last_name
FROM actor
ORDER BY first_name

SELECT DISTINCT
rating
FROM film

SELECT DISTINCT
rating,
rental_duration
FROM film

#3
SELECT DISTINCT
amount
FROM payment
ORDER BY amount DESC



--LIMIT



SELECT DISTINCT
amount
FROM payment
ORDER BY amount DESC
LIMIT 4



--COUNT



SELECT
COUNT(column_name)/(*) 
COUNT(DISTINCT first_name)
FROM table_name

#4
SELECT DISTINCT
district
FROM address

SELECT
rental_date
FROM rental
ORDER BY rental_date DESC
LIMIT 1

SELECT
COUNT(*)
FROM film

SELECT
COUNT(DISTINCT last_name)
FROM customer




----------DAY 2----------



--WHERE



SELECT
*
FROM payment
WHERE amount = 10.99

SELECT
first_name,
last_name
FROM customer
WHERE first_name = 'ADAM'

SELECT
COUNT(*)
FROM payment
WHERE amount = 0

#5
SELECT
COUNT(*)
FROM payment
WHERE customer_id = '100'/100;

SELECT
*
FROM customer
WHERE first_name = 'ERICA';
#5end

SELECT
*
FROM payment
WHERE amount <=/!=(<>) 10.99 
ORDER BY amount DESC;

SELECT 
first_name
last_name
FROM customer
WHERE first_name is null

#6
SELECT
COUNT(*)
FROM rental
WHERE return_date is null;

SELECT
payment_id, 
amount
FROM payment
WHERE amount <= 2



--WHERE with AND/OR



SELECT
*
FROM payment
WHERE amount = 10.99
AND customer_id = 426

SELECT
*
FROM payment
WHERE amount = 10.99
OR amount = 9.99

SELECT
*
FROM payment
WHERE (amount = 10.99
OR amount = 9.99)
AND customer_id = 426
--AND first, OR after

SELECT
*
FROM payment
WHERE (customer_id = 30
OR customer_id = 31)
AND amount = 2.99

#7
SELECT
*
FROM payment
WHERE (customer_id = 322
OR customer_id = 346
OR customer_id = 354)
AND (amount <= 2
OR amount >= 10)
ORDER BY customer_id, amount DESC

SELECT
*
FROM payment
WHERE customer_id IN (322, 346, 354)
AND (amount <= 2
OR amount >= 10)
ORDER BY customer_id, amount DESC



--BETWEEN



SELECT
*
FROM payment
WHERE payment_id >= 17000 AND payment_id <= 18000

SELECT
*
FROM payment
WHERE payment_id (NOT) BETWEEN 17000 AND 18000

SELECT 
payment_id,
amount,
payment_date
FROM payment
WHERE payment_date BETWEEN '2020-01-24' AND '2020-01-26'
ORDER BY payment_date

SELECT 
payment_id,
amount,
payment_date
FROM payment
WHERE payment_date BETWEEN '2020-01-24 22:00:00' AND '2020-01-24 23:30:00'
ORDER BY payment_date

SELECT * FROM rental
WHERE rental_date BETWEEN '2005-05-24' AND '2005-05-26 23:59'
ORDER BY rental_date DESC

#8
SELECT
COUNT(*)
FROM payment
WHERE (payment_date BETWEEN '2020-01-26' AND '2020-01-27 23:59') 
AND (amount BETWEEN 1.99 AND 3.99)



--IN



SELECT * FROM customer
WHERE customer_id IN (123,212, 323,243,353,432)

SELECT * FROM customer
WHERE first_name NOT IN ('LYDIA', 'MATTHEW')

#9
SELECT * FROM payment
WHERE customer_id IN (12, 25, 67, 93, 124, 234)
AND amount IN (4.99, 7.99, 9.99)
ANd payment_date BETWEEN '2020-01-01' AND '2020-01-31 23:59'



--LIKE



SELECT 
first_name
FROM actor
WHERE first_name (NOT) LIKE 'A%'/'a%'(ILIKE 'a%')
'%A%' - anywhere
'_A%' -second character

SELECT 
*
FROM film
WHERE description LIKE '%Drama%'
AND title LIKE '_T%'

#10.1
SELECT 
COUNT(*)
FROM film
WHERE description LIKE '%Documentary%'

#10.2
SELECT 
COUNT(*)
FROM customer
WHERE first_name LIKE '___'
AND (last_name LIKE '%X'
	 OR last_name LIKE '%Y')



--Comments



--Comment

/* Comment1
Comment2
Comment 3*/



--AS



SELECT 
payment_id AS invoice
FROM payment
--Just to show

first_name
--,last_name

SELECT
COUNT(*) AS number_of_movie
FROM film

#11.1
SELECT
COUNT(*) AS no_of_movies
FROM film
WHERE description LIKE '%Saga%'
AND (title LIKE 'A%'
OR title ILIKE '%R')

#11.2
SELECT * FROM customer
WHERE first_name LIKE '%ER%'
AND first_name LIKE '-A%'
ORDER BY last_name DESC

#11.3

SELECT * FROM payment
WHERE (amount = 0
OR amount BETWEEN 3.99 AND 7.99)
AND payment_date BETWEEN '2020-05-01' AND '2020-05-01 23:59'




--Day 3--



SELECT
SUM(amount)
COUNT(*) 
ROUND(AVG(amount), 2)
FROM payment

SELECT
SUM(amount),
COUNT(*),
ROUND(AVG(amount), 2) AS AVERAGE
FROM payment

--Challenge1: Aggregate function
SELECT 
MIN(replacement_cost),
MAX(replacement_cost),
ROUND(AVG(replacement_cost), 2) AS AVG,
SUM(replacement_cost)
FROM film

--Challenge1: Aggregate function(2)
SELECT
MIN(replacement_cost) AS min_replacement_cost,
MAX(replacement_cost) AS max_replacement_cost,
ROUND(AVG(replacement_cost),2) AS avg_replacement_cost,
SUM(replacement_cost) AS sum_replacement_cost
FROM film



--GROUP BY



SELECT 
customer_id,
SUM(amount),
MAX(amount)
FROM payment
GROUP BY customer_id
ORDER BY customer_id
--or
ORDER BY SUM(amount) --DESC

--Challenge2: GROUP BY


SELECT 
staff_id,
SUM(amount),
COUNT(amount)
FROM payment
--WHERE amount != 0
GROUP BY staff_id
ORDER BY staff_id DESC

SELECT 
staff_id,
customer_id,
SUM(amount),
COUNT(*)
FROM payment
GROUP BY staff_id, customer_id
ORDER BY COUNT(*) DESC



--Challenge3.1
SELECT 
COUNT(*),
staff_id
FROM payment
GROUP BY staff_id

--Challenge 3.2
SELECT 
staff_id,
SUM(amount)
FROM payment
GROUP BY staff_id

--Challenge 3.3
SELECT 
staff_id,
SUM(amount)
FROM payment
WHERE amount != 0
GROUP BY staff_id



--GROUP BY multiple



SELECT 
staff_id,
customer_id,
SUM(amount),
COUNT(*)
FROM payment
WHERE amount != 0
GROUP BY staff_id,customer_id
ORDER BY COUNT(*) DESC



--DATE



SELECT
*,
DATE(payment_date)
FROM payment


--Challenge 4.1
SELECT 
staff_id,
DATE(payment_date),
SUM(amount)
FROM payment
GROUP BY staff_id, DATE(payment_date)
ORDER BY SUM(amount) DESC

--Challenge 4.2
SELECT 
staff_id,
DATE(payment_date),
COUNT(*)
FROM payment
WHERE amount != 0
GROUP BY staff_id, DATE(payment_date)
ORDER BY SUM(amount) DESC



--HAVING



SELECT
customer_id,
SUM(amount)
FROM payment
GROUP BY customer_id
HAVING SUM(amount)>200

SELECT
staff_id,
SUM(amount),
COUNT(*),
DATE(payment_date)
FROM payment
WHERE amount != 0
GROUP BY staff_id, DATE(payment_date)
HAVING COUNT(*)>400
ORDER BY COUNT(*) DESC

SELECT
staff_id,
SUM(amount),
COUNT(*),
DATE(payment_date)
FROM payment
WHERE amount != 0
GROUP BY staff_id, DATE(payment_date)
HAVING COUNT(*) = 28 OR COUNT (*) = 29
ORDER BY COUNT(*) DESC

--Challenge 5
SELECT
customer_id,
DATE(payment_date),
ROUND(AVG(amount), 2) AS avg_amount,
COUNT(*)
FROM payment
WHERE payment_date BETWEEN '2020-04-28' AND '2020-05-01'
GROUP BY customer_id, DATE(payment_date)
HAVING COUNT(*) > 1
ORDER BY 3 DESC

--Challenge 5(2)
SELECT
customer_id,
DATE(payment_date),
ROUND(AVG(amount), 2) AS avg_amount,
COUNT(*)
FROM payment
WHERE DATE(payment_date) IN ('2020-04-28', '2020-04-29', '2020-04-30')
GROUP BY customer_id, DATE(payment_date)
HAVING COUNT(*) > 1
ORDER BY 3 DESC
